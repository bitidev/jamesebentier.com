#!/usr/bin/env ruby
# frozen_string_literal: true

require "fileutils"

DB_DATA_PATH   = File.expand_path("../tmp/db", __dir__)
CONTAINER_NAME = "postgres-james_ebentier"
PSQL_VERSION   = "16"
CONTAINER_CLI  = "docker"

def system!(*)
  system(*, exception: true)
end

def run_container # rubocop:disable Metrics/MethodLength
  command = [
    "#{CONTAINER_CLI} run",
    "--name #{CONTAINER_NAME}",
    "-d",
    "-e POSTGRES_USER=james_ebentier_development",
    "-e POSTGRES_PASSWORD=james_ebentier_development_password",
    "-e POSTGRES_DB=james_ebentier_development",
    "-e PGDATA=/var/lib/postgresql/data/pgdata",
    "-v #{DB_DATA_PATH}:/var/lib/postgresql/data",
    "-p 5432:5432",
    "postgres:#{PSQL_VERSION}"
  ].join(" ")
  system!(command)
end

if system("which #{CONTAINER_CLI} > /dev/null")
  FileUtils.mkdir_p(DB_DATA_PATH)

  container_state = `#{CONTAINER_CLI} ps --quiet --all --filter name=#{CONTAINER_NAME} --format '{{ .State }}'`.chomp
  if container_state.empty?
    puts "== Starting PostgreSQL #{PSQL_VERSION} container with name #{CONTAINER_NAME} =="
    run_container
  elsif container_state == "running"
    puts "== PostgreSQL #{PSQL_VERSION} container with name #{CONTAINER_NAME} is already running =="
  else
    puts "== Restarting PostgreSQL container =="
    system!("#{CONTAINER_CLI} stop #{CONTAINER_NAME} > /dev/null")
    system!("#{CONTAINER_CLI} rm #{CONTAINER_NAME} > /dev/null")
    run_container
  end
else
  abort "Container CLI command '#{CONTAINER_CLI}' not found in PATH"
end
